/*// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ParkingMeter.Core.Data.Services;

#nullable disable

namespace ParkingMeter.Core.Data.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("ParkingMeter.Core.Data.Models.BanknoteDenominations.BanknoteDenominationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("BillAcceptorWorkShiftInfoId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CashInfoId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<short>("Denomination")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BillAcceptorWorkShiftInfoId");

                    b.HasIndex("CashInfoId");

                    b.ToTable("BanknoteDenominationInfos");
                });

            modelBuilder.Entity("ParkingMeter.Core.Data.Models.Database.Devices.BillAcceptors.BillAcceptorActionInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("ActionType")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BanknoteDenomination")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("BillAcceptorPaymentSessionInfoId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BillAcceptorWorkShiftInfoId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("InitiatorType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsUploaded")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BillAcceptorPaymentSessionInfoId");

                    b.HasIndex("BillAcceptorWorkShiftInfoId");

                    b.ToTable("BillAcceptorActionInfos");
                });

            modelBuilder.Entity("ParkingMeter.Core.Data.Models.Database.Devices.BillAcceptors.BillAcceptorPaymentSessionInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("WasCompletedSuccessfully")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("BillAcceptorPaymentSessionInfos");
                });

            modelBuilder.Entity("ParkingMeter.Core.Data.Models.Database.Devices.BillAcceptors.BillAcceptorWorkShiftInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int?>("CloseInitiator")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("OpenInitiator")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("BillAcceptorWorkShiftInfos");
                });

            modelBuilder.Entity("ParkingMeter.Core.Data.Models.Database.Devices.DualConnectorTerminals.DualConnectorReviseInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PaymentInfoId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DualConnectorReviseInfos");
                });

            modelBuilder.Entity("ParkingMeter.Core.Data.Models.Database.Devices.SbPilotTerminals.SbPilotNativeReviseInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PaymentInfoId")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Receipt")
                        .HasColumnType("BLOB");

                    b.HasKey("Id");

                    b.ToTable("SbPilotNativeReviseInfos");
                });

            modelBuilder.Entity("ParkingMeter.Core.Data.Models.Database.Devices.YarusK2100.YarusK2100NativeReviseInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Approved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("EcrNumber")
                        .HasColumnType("TEXT");

                    b.Property<int>("ErNumber")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LocalTime")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PdsReceipt")
                        .HasColumnType("BLOB");

                    b.Property<string>("ResponseCode")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("YarusK2100NativeReviseInfos");
                });

            modelBuilder.Entity("ParkingMeter.Core.Data.Models.Database.Devices.YarusK2100.YarusK2100RawNativeTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Data")
                        .HasColumnType("BLOB");

                    b.Property<int>("Length")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MessageCode")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("YarusK2100RawNativeTransactions");
                });

            modelBuilder.Entity("ParkingMeter.Core.Data.Models.Database.Devices.YarusK2100.YarusK2100State", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("EcrNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ErNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("YarusK2100States");
                });

            modelBuilder.Entity("ParkingMeter.Core.Data.Models.Database.Fiscalization.BaseNativeCloseShiftReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FirstNonSentDocumentDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("FiscalDeviceNumber")
                        .HasColumnType("TEXT");

                    b.Property<uint>("FiscalDocumentNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FiscalSign")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasFnMemoryOverflow")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasOfdResponseTimeout")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IndividualNumberTaxpayer")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFnNeedExpressReplacement")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFnResourceEnding")
                        .HasColumnType("INTEGER");

                    b.Property<string>("KktRegistrationNumber")
                        .HasColumnType("TEXT");

                    b.Property<uint>("NonSentDocumentQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("OfdVersion")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ShiftFiscalDocumentQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ShiftNumber")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ShiftReceiptQuantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("CloseShiftReports");
                });

            modelBuilder.Entity("ParkingMeter.Core.Data.Models.Database.Fiscalization.FiscalizeResponseInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double?>("Amount")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<uint>("DocumentNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FiscalDeviceSerialNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("FiscalSign")
                        .HasColumnType("TEXT");

                    b.Property<string>("KktSerialNumber")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OperationDateTime")
                        .HasColumnType("TEXT");

                    b.Property<uint>("OperationType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("OperationWasCompletedCorrect")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ReceiptNumber")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ShiftInfoId")
                        .HasColumnType("TEXT");

                    b.Property<uint?>("ShiftNumber")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Tax")
                        .HasColumnType("REAL");

                    b.Property<string>("TaxType")
                        .HasColumnType("TEXT");

                    b.Property<string>("TaxationType")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ShiftInfoId");

                    b.ToTable("FiscalizeResponseInfos");
                });

            modelBuilder.Entity("ParkingMeter.Core.Data.Models.Database.Fiscalization.ShiftInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CloseShiftReportId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("ShiftNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CloseShiftReportId");

                    b.ToTable("ShiftInfos");
                });

            modelBuilder.Entity("ParkingMeter.Core.Data.Models.Database.ParkingMeterState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastReviseDateTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastUpdateValidWorkShiftInfoDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastWorkShiftInfoRowData")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ParkingMeterStates");
                });

            modelBuilder.Entity("ParkingMeter.Core.Data.Models.Database.ParkingPasses.ParkingBookParkingPass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int?>("Amount")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "price");

                    b.Property<string>("AreaCode")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "zoneCode");

                    b.Property<bool>("CanPayPass")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "canpay");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("LicensePlateNumber")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "grz");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "permissionKind");

                    b.Property<bool>("NeedReceipt")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PassFinishedAt")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "timeend");

                    b.Property<string>("PassId")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "permissionKindCode");

                    b.Property<DateTime>("PassStartedAt")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "timestart");

                    b.Property<Guid>("PaymentInfoId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PaymentInfoTypeDescriptor")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PaymentMethod")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductName")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "service");

                    b.Property<string>("UserPhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("WasSent")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ParkingBookParkingPasses");
                });

            modelBuilder.Entity("ParkingMeter.Core.Data.Models.Database.ParkingPasses.ParkingBookParkingPassSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DayType")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "kindDay");

                    b.Property<int>("Discount")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "discount");

                    b.Property<DateTime>("FinishedAt")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "end");

                    b.Property<Guid?>("ParkingPassId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "start");

                    b.HasKey("Id");

                    b.HasIndex("ParkingPassId");

                    b.ToTable("ParkingBookParkingPassSchedule");

                    b.HasAnnotation("Relational:JsonPropertyName", "schedule");
                });

            modelBuilder.Entity("ParkingMeter.Core.Data.Models.Database.ParkingSessions.BoxParkingSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int?>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AreaId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExitCode")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("ExitCodeLifeTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("LicensePlateNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("NeedReceipt")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PaymentInfoId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PaymentInfoTypeDescriptor")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PaymentMethod")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductName")
                        .HasColumnType("TEXT");

                    b.Property<string>("SessionId")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("SessionLifeTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserPhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("WasSent")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("BoxParkingSessions");
                });

            modelBuilder.Entity("ParkingMeter.Core.Data.Models.Database.ParkingSessions.RuParkingSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AreaId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("TEXT");

                    b.Property<bool>("NeedReceipt")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ParkingMeterId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PaymentInfoId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PaymentInfoTypeDescriptor")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PaymentMethod")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Srn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserPhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<int>("VehicleCategory")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("WasSent")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("RuParkingSessions");
                });

            modelBuilder.Entity("ParkingMeter.Core.Data.Models.Database.Tariffs.AppliedTariff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Minutes")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("ParkingSessionId")
                        .HasColumnType("TEXT");

                    b.Property<double>("PricePerHour")
                        .HasColumnType("REAL");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("ParkingSessionId");

                    b.ToTable("AppliedTariffs");
                });

            modelBuilder.Entity("ParkingMeter.Core.Data.Models.ParkingBook.Out.ParkingBookOutParkingSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int?>("Amount")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "totalcost");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<double>("Discount")
                        .HasColumnType("REAL")
                        .HasAnnotation("Relational:JsonPropertyName", "totaldiscount");

                    b.Property<string>("LicensePlateNumber")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "grz");

                    b.Property<bool>("NeedReceipt")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PaymentEndTime")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "timeout");

                    b.Property<Guid>("PaymentInfoId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PaymentInfoTypeDescriptor")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PaymentMethod")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PaymentStartTime")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "timein");

                    b.Property<string>("ProductName")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "service");

                    b.Property<string>("SessionId")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "sessionId");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "date");

                    b.Property<bool?>("WasSent")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ZeroAmountReason")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "reason");

                    b.HasKey("Id");

                    b.ToTable("ParkingBookOutSessions");
                });

            modelBuilder.Entity("ParkingMeter.Core.Data.Models.ParkingBook.ParkingBookParkingSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("LicensePlateNumber")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "grz");

                    b.Property<bool>("NeedReceipt")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PaymentInfoId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PaymentInfoTypeDescriptor")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PaymentMethod")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SessionId")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "sessionId");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "date");

                    b.Property<string>("UserPhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("WasSent")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ParkingBookSessions");
                });

            modelBuilder.Entity("ParkingMeter.Core.Data.Models.PaymentInfos.CashInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CashInfos");
                });

            modelBuilder.Entity("ParkingMeter.Core.Data.Models.PaymentInfos.CashPaymentInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("ChangedCashId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DepositedCashId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ChangedCashId");

                    b.HasIndex("DepositedCashId");

                    b.ToTable("CashPaymentInfos");
                });

            modelBuilder.Entity("ParkingMeter.Core.Data.Models.PaymentInfos.CommonCardPaymentInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IssuerName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastReviseDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PosEntryMode")
                        .HasColumnType("TEXT");

                    b.Property<string>("PrimaryAccountNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("RrNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("TerminalId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CommonCardPaymentInfos");

                    b.HasDiscriminator<string>("Discriminator").HasValue("CommonCardPaymentInfo");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ParkingMeter.Core.Data.Models.Database.Devices.DualConnectorTerminals.DualConnectorPaymentInfo", b =>
                {
                    b.HasBaseType("ParkingMeter.Core.Data.Models.PaymentInfos.CommonCardPaymentInfo");

                    b.Property<int?>("AdditionalAmount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdditionalResponseData")
                        .HasColumnType("TEXT");

                    b.Property<string>("AdditionalTransactionData")
                        .HasColumnType("TEXT");

                    b.Property<string>("AuthorizationId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CardInputMode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CommunicationServerId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CompletedOperationNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CryptogramData")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CurrencyCode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DeviceModelName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("FirstUserCommandMode")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("HostOperationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("HostResponseCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("MerchantId")
                        .HasColumnType("TEXT");

                    b.Property<string>("OperationCode")
                        .HasColumnType("TEXT");

                    b.Property<int?>("OperationResult")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReceiptData")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SecondUserCommandMode")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("TerminalOperationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionStatus")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserCommandResult")
                        .HasColumnType("INTEGER");

                    b.ToTable("CommonCardPaymentInfos", t =>
                        {
                            t.Property("AuthorizationId")
                                .HasColumnName("DualConnectorPaymentInfo_AuthorizationId");
                        });

                    b.HasDiscriminator().HasValue("DualConnectorPaymentInfo");
                });

            modelBuilder.Entity("ParkingMeter.Core.Data.Models.Database.Devices.SbPilotTerminals.SbPilotPaymentInfo", b =>
                {
                    b.HasBaseType("ParkingMeter.Core.Data.Models.PaymentInfos.CommonCardPaymentInfo");

                    b.Property<string>("AuthorizationId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("BonusPaidAmount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CardExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CardNumberHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("CardTrackTape")
                        .HasColumnType("TEXT");

                    b.Property<string>("InternalOperationNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsSberbankCard")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsVasDataAvailable")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LoyaltyProgramNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MainProcessingCenterState")
                        .HasColumnType("TEXT");

                    b.Property<string>("MerchantNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("MifareLoyaltyCardNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("MonitoringSystemMessage")
                        .HasColumnType("TEXT");

                    b.Property<string>("MonitoringSystemMessageType")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("OperationDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("OperationResultCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("OperationResultText")
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionReferenceNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserAnswer")
                        .HasColumnType("TEXT");

                    b.ToTable("CommonCardPaymentInfos", t =>
                        {
                            t.Property("AuthorizationId")
                                .HasColumnName("SbPilotPaymentInfo_AuthorizationId");

                            t.Property("MerchantNumber")
                                .HasColumnName("SbPilotPaymentInfo_MerchantNumber");
                        });

                    b.HasDiscriminator().HasValue("SbPilotPaymentInfo");
                });

            modelBuilder.Entity("ParkingMeter.Core.Data.Models.Database.Devices.YarusK2100.YarusK2100PaymentInfo", b =>
                {
                    b.HasBaseType("ParkingMeter.Core.Data.Models.PaymentInfos.CommonCardPaymentInfo");

                    b.Property<byte[]>("ApplicationId")
                        .HasColumnType("BLOB");

                    b.Property<bool>("Approved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AuthorizationId")
                        .HasColumnType("TEXT");

                    b.Property<int>("BatchNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CardholderVerificationMethod")
                        .HasColumnType("TEXT");

                    b.Property<string>("Currency")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("DecimalPoint")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EcrNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ErNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("InvoiceNumber")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LocalTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MerchantNumber")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PdsReceipt")
                        .HasColumnType("BLOB");

                    b.Property<string>("ResponseCode")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("SecondPdsReceipt")
                        .HasColumnType("BLOB");

                    b.Property<int>("StatusId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StatusText")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("TerminalVerificationResult")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("TransactionCertificate")
                        .HasColumnType("BLOB");

                    b.Property<string>("VisualResponse")
                        .HasColumnType("TEXT");

                    b.Property<bool>("WasPosEntryOffline")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("WasSent")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("YarusK2100PaymentInfo");
                });

            modelBuilder.Entity("ParkingMeter.Core.Data.Models.BanknoteDenominations.BanknoteDenominationInfo", b =>
                {
                    b.HasOne("ParkingMeter.Core.Data.Models.Database.Devices.BillAcceptors.BillAcceptorWorkShiftInfo", null)
                        .WithMany("InitialPaymentState")
                        .HasForeignKey("BillAcceptorWorkShiftInfoId");

                    b.HasOne("ParkingMeter.Core.Data.Models.PaymentInfos.CashInfo", null)
                        .WithMany("Banknotes")
                        .HasForeignKey("CashInfoId");
                });

            modelBuilder.Entity("ParkingMeter.Core.Data.Models.Database.Devices.BillAcceptors.BillAcceptorActionInfo", b =>
                {
                    b.HasOne("ParkingMeter.Core.Data.Models.Database.Devices.BillAcceptors.BillAcceptorPaymentSessionInfo", null)
                        .WithMany("BillAcceptorActionInfos")
                        .HasForeignKey("BillAcceptorPaymentSessionInfoId");

                    b.HasOne("ParkingMeter.Core.Data.Models.Database.Devices.BillAcceptors.BillAcceptorWorkShiftInfo", null)
                        .WithMany("BillAcceptorActionInfos")
                        .HasForeignKey("BillAcceptorWorkShiftInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ParkingMeter.Core.Data.Models.Database.Fiscalization.FiscalizeResponseInfo", b =>
                {
                    b.HasOne("ParkingMeter.Core.Data.Models.Database.Fiscalization.ShiftInfo", null)
                        .WithMany("FiscalizeResponseInfos")
                        .HasForeignKey("ShiftInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ParkingMeter.Core.Data.Models.Database.Fiscalization.ShiftInfo", b =>
                {
                    b.HasOne("ParkingMeter.Core.Data.Models.Database.Fiscalization.BaseNativeCloseShiftReport", "CloseShiftReport")
                        .WithMany()
                        .HasForeignKey("CloseShiftReportId");

                    b.Navigation("CloseShiftReport");
                });

            modelBuilder.Entity("ParkingMeter.Core.Data.Models.Database.ParkingPasses.ParkingBookParkingPassSchedule", b =>
                {
                    b.HasOne("ParkingMeter.Core.Data.Models.Database.ParkingPasses.ParkingBookParkingPass", "ParkingPass")
                        .WithMany("Schedules")
                        .HasForeignKey("ParkingPassId");

                    b.Navigation("ParkingPass");
                });

            modelBuilder.Entity("ParkingMeter.Core.Data.Models.Database.Tariffs.AppliedTariff", b =>
                {
                    b.HasOne("ParkingMeter.Core.Data.Models.Database.ParkingSessions.RuParkingSession", "ParkingSession")
                        .WithMany("AppliedTariffs")
                        .HasForeignKey("ParkingSessionId");

                    b.Navigation("ParkingSession");
                });

            modelBuilder.Entity("ParkingMeter.Core.Data.Models.PaymentInfos.CashPaymentInfo", b =>
                {
                    b.HasOne("ParkingMeter.Core.Data.Models.PaymentInfos.CashInfo", "ChangedCash")
                        .WithMany()
                        .HasForeignKey("ChangedCashId");

                    b.HasOne("ParkingMeter.Core.Data.Models.PaymentInfos.CashInfo", "DepositedCash")
                        .WithMany()
                        .HasForeignKey("DepositedCashId");

                    b.Navigation("ChangedCash");

                    b.Navigation("DepositedCash");
                });

            modelBuilder.Entity("ParkingMeter.Core.Data.Models.Database.Devices.BillAcceptors.BillAcceptorPaymentSessionInfo", b =>
                {
                    b.Navigation("BillAcceptorActionInfos");
                });

            modelBuilder.Entity("ParkingMeter.Core.Data.Models.Database.Devices.BillAcceptors.BillAcceptorWorkShiftInfo", b =>
                {
                    b.Navigation("BillAcceptorActionInfos");

                    b.Navigation("InitialPaymentState");
                });

            modelBuilder.Entity("ParkingMeter.Core.Data.Models.Database.Fiscalization.ShiftInfo", b =>
                {
                    b.Navigation("FiscalizeResponseInfos");
                });

            modelBuilder.Entity("ParkingMeter.Core.Data.Models.Database.ParkingPasses.ParkingBookParkingPass", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("ParkingMeter.Core.Data.Models.Database.ParkingSessions.RuParkingSession", b =>
                {
                    b.Navigation("AppliedTariffs");
                });

            modelBuilder.Entity("ParkingMeter.Core.Data.Models.PaymentInfos.CashInfo", b =>
                {
                    b.Navigation("Banknotes");
                });
#pragma warning restore 612, 618
        }
    }
}
*/